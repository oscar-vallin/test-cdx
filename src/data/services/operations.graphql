query BeginLogin($userId: String!) {
    beginLogin(userId: $userId) {
        userId
        step
        redirectPath
        allowLostPassword
    }
}

mutation PasswordLogin($userId: String!, $password: String!){
    passwordLogin(userId: $userId, password: $password){
        step
        loginCompleteDomain{
            type
            selectedPage
            navItems{
                ...navItemFragment
                subNavItems{
                    ...navItemFragment
                }
            }
        }
        tokenUser{
            token
            session{
                id
                orgId
                userId
                defaultAuthorities
            }
        }
    }
}

fragment navItemFragment on WebNav{
    label
    page{
        ...webPageFragment
    }
    appDomain
}

fragment webPageFragment on WebPage{
    type
    parameters{
        ...unionNVP
    }
    commands{
        label
        page{
            type
            parameters{
                ...unionNVP
            }
        }
        appDomain
    }
    pivots{
        label
        type
    }
}

fragment unionNVP on NVP{
    __typename
    ... on NVPStr {
        name
        strValue: value
    }
    ... on NVPId {
        name
        idValue: value
    }
}

query WorkPacketStatuses($orgSid: ID!, $dateRange: DateTimeRangeInput, $filter: WorkPacketStatusFilter){

    workPacketStatuses(orgSid: $orgSid, dateRange: $dateRange, filter: $filter){
        workOrderId
        timestamp
        planSponsorId
        detailsPath
        subClientPath
        inboundFilename
        vendorId
        step
        stepStatus
        packetStatus
        reprocessedBy
        reprocessAction
        populationCount
        recordHighlightCount
        recordHighlightType
        clientFileArchivePath
        vendorFileArchivePath
        supplementalFilesArchivePaths
        archiveOnly
        hasErrors
    }
}

query WorkPacketStatusDetails($orgSid: ID!, $workOrderId: String!){
    workPacketStatusDetails(orgSid: $orgSid, workOrderId: $workOrderId){
        workOrderId
        specId
        specImplName
        fingerPrint
        suppressBilling
        workStepStatus{
            stepStatus
            stepName
            stepType
            populationCount{
                value
            }
            stepFile{
                value
                label
            }
            nvp{
                name
                value
            }
            recordCounts{
                ...recordCountsFragment
            }
        }
        deliveredFile{
            filename
            fileSizeInBytes
            textSizeInBytes
            timeDelivered
            ftp{
                protocol
                host
                username
                folder
                port
            }
            kcurl{
                url
            }
        }
        extractParameters{
            originalParameter{
                ...extractParameterFragment
            }
            overriddenParameter{
                ...extractParameterFragment
            }
            derivedParameter{
                ...extractParameterFragment
            }
        }
        qualityChecks{
            sequenceCreationEvent{
                context
                unitId
                recordCreationEvent{
                    context
                    outerContext
                    unitId
                    error{
                        ...fieldCreationFragment
                    }
                    warning{
                        ...fieldCreationFragment
                    }
                    information{
                        ...fieldCreationFragment
                    }
                }
            }
        }
        enrollmentStats{
            ...enrollmentStatFragment
        }
        inboundEnrollmentStats{
            ...enrollmentStatFragment
        }
        outboundEnrollmentStats{
            ...enrollmentStatFragment
        }
        outboundRecordCounts{
            ...recordCountsFragment
        }
        inboundLabel
        outboundLabel
    }
}

fragment recordCountsFragment on RecordCounts {
    totalCount
    showUser
    recordCount{
        name
        count
    }
}

fragment extractParameterFragment on ExtractParameter{
    label
    name
    value
}

fragment fieldCreationFragment on FieldCreationEvent{
    message
    name
    id
    value
    rawValue
    type
}

fragment enrollmentStatFragment on EnrollmentStat{
    insuredStat{
        ...insuredStatFragment
    }
    excludedInsuredStat{
        ...insuredStatFragment
    }
    excludedPlanInsuredStat{
        ...planInsuredStatFragment
    }
    planInsuredStat{
        ...planInsuredStatFragment
    }
}

fragment insuredStatFragment on InsuredStat{
    subscribers{
        ...insuredStatCountFragment
    }
    dependents{
        ...insuredStatCountFragment
    }
}

fragment planInsuredStatFragment on PlanInsuredStat{
    planCode
    planType
    subscribers{
        ...insuredStatCountFragment
    }
    dependents{
        ...insuredStatCountFragment
    }
}

fragment insuredStatCountFragment on InsuredStatCount{
    active{
        ...statIntFragment
    }
    ended{
        ...statIntFragment
    }
    expectedTotal
    inTolerance
    toleranceMsg
    hold
}

fragment statIntFragment on StatInt{
    prior
    value
}

query DashboardPeriods($orgSid: ID!){
    dashboardPeriods(orgSid: $orgSid){
        dailyCounts{
            ...dashPeriodCountsFragment
        }
        yesterdayCounts{
            ...dashPeriodCountsFragment
        }
        monthlyCounts{
            ...dashPeriodCountsFragment
        }
        lastMonthlyCounts{
            ...dashPeriodCountsFragment
        }
    }
}

fragment dashPeriodCountsFragment on DashboardPeriodCounts{
    vendorTransmissions{
        ...dashPeriodCountFragment
    }
    vendorTransmissionsBySpec{
        ...dashPeriodCountFragment
    }
    planSponsorTransmissions{
        ...dashPeriodCountFragment
    }
    fileTransmissions{
        ...dashPeriodCountFragment
    }
    vendorProcessErrors{
        ...dashPeriodCountFragment
    }
    planSponsorProcessErrors{
        ...dashPeriodCountFragment
    }
    fileProcessErrors{
        ...dashPeriodCountFragment
    }
    transmissionCount
    billingUnitCount
    processErrorCount
}

fragment dashPeriodCountFragment on DashboardPeriodCount{
    name
    secondaryDescr
    count
    total
}

query AMPolicyPage($orgSid: ID!) {
    amPolicyPage(orgSid: $orgSid) {
        permissionServices{
            name
            value
        }
        predicates{
            name
            value
        }
        showTemplateSection
        templateServices{
            name
            value
        }
        permissionEffectNVPs{
            name
            value
        }
    }
}

query AMPolicyFacetsForService($orgSid: ID!, $cdxService: CDXService!){
    amPolicyFacetsForService(orgSid: $orgSid, cdxService: $cdxService){
        name
        value
    }
}

query AMPolicyVerbForFacet($orgSid: ID!, $cdxService: CDXService!, $cdxFacet: CDXFacet!){
    amPolicyVerbForFacet(orgSid: $orgSid, cdxService: $cdxService, cdxFacet: $cdxFacet){
        name
        value
    }
}

mutation CreateOrg($orgInfo: CreateOrgInput!){
    createOrg(orgInfo: $orgInfo){
        id
        orgId
        orgType
    }
}

mutation CreateAMPolicy($policyInfo: CreateAMPolicyInput!){
    createAMPolicy(policyInfo: $policyInfo){
        ...policyFragment
    }
}

fragment policyFragment on AMPolicy{
    id
    name
    tmpl
    tmplUseAsIs
    permissions {
        id
        effect
        predicate
        predVar1
        predParam1
        actions {
            id
            service
            facet
            verb
        }
    }
}

mutation CreateAMGroup($amGroupInfo: CreateAMGroupInput!){
    createAMGroup(amGroupInfo: $amGroupInfo){
        id
        name
        description
        tmpl
        tmplUseAsIs
        policies{
            id
            name
        }
    }
}

query SystemTemplateAMGroupByName($name: String!){
    systemTemplateAMGroupByName(name: $name){
        id
        name
        description
        tmpl
        tmplUseAsIs
        tmplServiceType
    }
}

mutation CreateUser($userInfo: CreateUserInput!, $personInfo: CreatePersonInput!){
    createUser(userInfo: $userInfo, personInfo: $personInfo){
        id
        email
        person{
            firstNm
            lastNm
        }
    }
}

query AMPoliciesForOrgP($orgSid: ID!, $pageableInput: PageableInput){
    amPoliciesForOrg(orgSid: $orgSid, pageableInput: $pageableInput){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            name
            tmpl
        }
    }
}

query TopLevelOrgsByType($orgType: OrgType!){
    topLevelOrgsByType(orgType: $orgType){
        id
        orgId
        orgType
    }
}

query AMGroupsForOrgP($orgSid: ID!, $pageableInput: PageableInput){
    amGroupsForOrg(orgSid: $orgSid, pageableInput: $pageableInput){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            name
            tmpl
        }
    }
}

query UsersForOrgFP($orgSid: ID!, $userFilter: UserFilterInput, $pageableInput: PageableInput){
    usersForOrg(orgSid: $orgSid, userFilter: $userFilter, pageableInput: $pageableInput){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            email
            person{
                firstNm
                lastNm
            }
        }
    }
}

query DirectOrganizations($orgSid: ID!){
    directOrganizations(orgSid: $orgSid){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            name
            orgId
            orgType
        }
    }
}

query DirectOrganizationsF($orgSid: ID!, $orgFilter: OrgFilterInput){
    directOrganizations(orgSid: $orgSid, orgFilter: $orgFilter){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            name
            orgId
            orgType
        }
    }
}

query DirectOrganizationsFP($orgSid: ID!, $orgFilter: OrgFilterInput, $pageableInput: PageableInput){
    directOrganizations(orgSid: $orgSid, orgFilter: $orgFilter, pageableInput: $pageableInput){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            name
            orgId
            orgType
        }
    }
}

fragment paginationInfoFragment on PaginationInfo{
    totalPages
    totalElements
    pageNumber
    pageSize
}

query WPProcessErrors($orgSid: ID!, $dateRange: DateTimeRangeInput, $pageableInput: PageableInput){
    wpProcessErrors(orgSid: $orgSid, dateRange: $dateRange, pageableInput: $pageableInput){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            workOrderId
            startTime
            stepName
            planSponsorId
            vendorId
            msg
            inboundFilename
            clientFileArchivePath
        }
    }
}

query WPTransmissions($orgSid: ID!, $dateRange: DateTimeRangeInput, $pageableInput: PageableInput){
    wpTransmissions(orgSid: $orgSid, dateRange: $dateRange, pageableInput: $pageableInput){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            id
            workOrderId
            deliveredOn
            planSponsorId
            vendorId
            specId
            implementation
            inboundFilename
            outboundFilename
            outboundFilesize
            billingCount
            totalRecords
            extractType
            extractVersion
        }
    }
}

query AMPolicy($orgSid: ID!, $policySid: ID!){
    amPolicy(orgSid: $orgSid, policySid: $policySid){
        id
        name
        permissions{
            id
            effect
            actions{
                id
                service
                facet
                verb
            }
            predicate
            predVar1
            predParam1
        }
        tmpl
        tmplUseAsIs
        tmplServiceType
    }
}

query ScheduleOccurrences($orgSid: ID!, $dateRange: DateTimeRangeInput, $pageableInput: PageableInput){
    scheduleOccurrences(orgSid: $orgSid, dateRange: $dateRange, pageableInput: $pageableInput){
        paginationInfo{
            ...paginationInfoFragment
        }
        nodes{
            resource
            scheduleId
            timeScheduled
            schedOccurStatus
            runOccurrences{
                workOrderId
                timeRan
                status
            }
        }
    }
}

mutation UpdateAMPermissionAction($updateAMPermissionActionInput: UpdateAMPermissionActionInput){
    updateAMPermissionAction(updateAMPermissionActionInput : $updateAMPermissionActionInput) {
        id
        service
        facet
        verb
    }
}

query OrgById($orgSid: ID!, $orgId: String!){
    orgById(orgSid: $orgSid, orgId: $orgId){
        id
        name
        orgId
        orgType
    }
}

query CurrentUser{
    currentUser{
        loggedIn
        domain{
            type
            selectedPage
            navItems{
                ...navItemFragment
                subNavItems{
                    ...navItemFragment
                }
            }
        }
        tokenUser{
            token
            session{
                id
                orgId
                userId
                defaultAuthorities
            }
        }
    }
}

mutation RemoveAMPolicy($policySid: ID!){
    removeAMPolicy(policySid: $policySid)
}

mutation RemoveAMPolicies($deleteAMPoliciesInput: DeleteAMPoliciesInput!){
    removeAMPolicies(deleteAMPoliciesInput: $deleteAMPoliciesInput)
}

mutation CreateAMPermission($permissionInfo: CreateAMPermissionInput!){
    createAMPermission(permissionInfo: $permissionInfo){
        id
        effect
        actions{
            id
            service
            facet
            verb
        }
    }
}

mutation UpdateAMPermission($updateAMPermissionInput : UpdateAMPermissionInput){
    updateAMPermission(updateAMPermissionInput : $updateAMPermissionInput){
        id
        effect
        predicate
        predVar1
        predParam1
    }
}

mutation RemoveAMPermission($permissionSid: ID!){
    removeAMPermission(permissionSid: $permissionSid)
}

mutation UpdateAMPolicy($updateAMPolicyInput : UpdateAMPolicyInput!){
    updateAMPolicy(updateAMPolicyInput : $updateAMPolicyInput){
        id
        name
        tmpl
        tmplUseAsIs
        tmplServiceType
    }
}

mutation RemoveAMPermissionAction($permissionActionSid: ID!){
    removeAMPermissionAction(permissionActionSid: $permissionActionSid)
}
type Query {
    beginLogin(userId: String!) : LoginStep
    exchangeActivityInProcess(orgSidInput : OrgSidInput!, dateRange: DateTimeRangeInput!, pageableInput: PageableInput!) : OrganizationLinkConnection
    exchangeActivityTransmitted(orgSidInput : OrgSidInput!, dateRange: DateTimeRangeInput!, pageableInput: PageableInput!) : OrganizationLinkConnection
    exchangeActivityErrored(orgSidInput : OrgSidInput!, dateRange: DateTimeRangeInput!, pageableInput: PageableInput!) : OrganizationLinkConnection

    workPacketStatusDetails(orgSid: ID!, workOrderId: String!): WorkPacketStatusDetails
    workPacketStatuses(orgSid: ID!, dateRange: DateTimeRangeInput, filter: WorkPacketStatusFilter): [WorkPacketStatus]
    dashboardPeriods(orgSid: ID!): DashboardPeriods
    changeOwnPasswordPage : PasswordPage
    currentUser : CurrentUserInfo
    userTheme(themeColorMode: ThemeColorMode): DashTheme
    logOut : LogOutInfo
    amPolicyPage(orgSid: ID!) : AMPolicyPage
    amPolicy(orgSid: ID!, policySid: ID!) : AMPolicy
    amPolicyFacetsForService(orgSid: ID!, cdxService: CDXService!) : [CDXFacetNVP]
    amPolicyVerbForFacet(orgSid: ID!, cdxService: CDXService!, cdxFacet: CDXFacet!) : [PermissionVerbNVP]
    amPoliciesForOrg(orgSid: ID!, pageableInput: PageableInput) : AMPolicyConnection
    amGroupsForOrg(orgSid: ID!, pageableInput: PageableInput) : AMGroupConnection
    usersForOrg(orgSid: ID!, userFilter: UserFilterInput, pageableInput: PageableInput) : UserConnection
    systemTemplateAMGroupByName(name: String!): [AMGroup]
    topLevelOrgsByType(orgType: OrgType!): [Organization]
    orgById(orgSid: ID, orgId: String!): Organization
    directOrganizations(orgSid: ID!, orgFilter: OrgFilterInput, pageableInput: PageableInput): OrganizationConnection
    wpProcessErrors(orgSid: ID!, dateRange: DateTimeRangeInput, pageableInput: PageableInput) : WPProcessErrorConnection
    wpTransmissions(orgSid: ID!, dateRange: DateTimeRangeInput, pageableInput: PageableInput) : WPTransmissionConnection
    scheduleOccurrences(orgSid: ID!, dateRange: DateTimeRangeInput, pageableInput: PageableInput) : ScheduleOccurrenceConnection

    dashThemeColorForOrg(ownedInput: OwnedInput, pageableInput: PageableInput) : DashThemeColorConnection
    dashSiteForOrg(orgSidInput : OrgSidInput) : DashSite
    dashThemeColor(ownedInputSid : OwnedInputSid) : DashThemeColor
    dashThemeColorByName(ownedInputName : OwnedInputName) : DashThemeColor
    defaultDashThemeForSite(ownedInput : OwnedInput) : DashTheme
    defaultDashThemeForSitePage(ownedInput : OwnedInput) : DefaultDashThemePage
    """userDashThemePage(ownedInput : OwnedInput) : UserDashThemePage"""
    currentUserDashThemePage : UserDashThemePage

    findUserByEmail(userEmail: String!) : User
    findUser(ownedInputSid : OwnedInputSid) : User
}

type Mutation {
    passwordLogin(userId: String!, password: String!) : LoginStep
    updateOwnPassword(updatePasswordInput: UpdatePasswordInput!) : UserSession
    createOrg(orgInfo: CreateOrgInput!): Organization

    createAMPolicy(policyInfo: CreateAMPolicyInput!) : AMPolicy
    createAMPermission(permissionInfo: CreateAMPermissionInput!) : AMPermission
    createAMPermissionAction(permssionActionInfo: CreateAMPermissionActionInput!) : AMPermissionAction

    createAMGroup(amGroupInfo: CreateAMGroupInput!) : AMGroup
    createUser(userInfo: CreateUserInput!, personInfo: CreatePersonInput!) : User

    removeAMPolicies(deleteAMPoliciesInput: DeleteAMPoliciesInput) : String
    removeAMPolicy(policySid: ID!) : String
    removeAMPermissions(deleteAMPermissionsInput: DeleteAMPermissionsInput) : String
    removeAMPermission(permissionSid: ID!) : String
    removeAMPermissionActions(deleteAMPermissionActionsInput: DeleteAMPermissionActionsInput) : String
    removeAMPermissionAction(permissionActionSid: ID!) : String

    updateAMPolicy(updateAMPolicyInput : UpdateAMPolicyInput) : AMPolicy
    updateAMPermission(updateAMPermissionInput : UpdateAMPermissionInput) : AMPermission
    updateAMPermissionAction(updateAMPermissionActionInput : UpdateAMPermissionActionInput) : AMPermissionAction

    createDashThemeColor(createDashThemeColorInput : CreateDashThemeColorInput!) : DashThemeColor
    updateDashThemeColor(updateDashThemeColorInput : UpdateDashThemeColorInput!) : DashThemeColor
    createDefaultDashTheme(createDefaultDashThemeInput : CreateDefaultDashThemeInput) : DashTheme
    updateDefaultDashTheme(updateDefaultDashThemeInput : UpdateDefaultDashThemeInput ) : DashTheme

    removeDashThemeColor(ownedInputSid : OwnedInputSid) : GQOperationResponse
    removeDefaultDashTheme(ownedInputSid : OwnedInputSid) : GQOperationResponse

    setDashThemeColorDefault(dashThemeColorDefaultInput : DashThemeColorDefaultInput) : DashThemeColor
    setDashThemeColorMode(dashThemeColorModeInput : DashThemeColorModeInput) : DashThemeColor

    """
    createUserDashTheme(createUserDashThemeInput : CreateUserDashThemeInput) : DashTheme
    updateUserDashTheme(updateUserDashThemeInput : UpdateUserDashThemeInput ) : DashTheme

    updateOwnDashTheme(dashThemeInput : DashThemeInput ) : DashTheme
    """
    createOrUpdateOwnDashTheme(dashThemeInput : DashThemeInput) : DashTheme
}

scalar DateTime
scalar Date

type LoginStep {
    userId: String!
    step: LoginStepType!
    redirectPath: String
    allowLostPassword: Boolean
    """
    this is the domain/section of the website to continue to if the login is complete
    """
    loginCompleteDomain: WebAppDomain
    tokenUser: TokenUser
}

type TokenUser {
    token: String
    session: UserSession
}

type CurrentUserInfo{
    domain: WebAppDomain
    tokenUser: TokenUser
    loggedIn: Boolean
}

type UserSession{
    id: ID!
    orgId: ID!
    userId: String!
    firstNm: String!
    defaultAuthorities: [String]
}

enum LoginStepType {
    USERNAME
    PASSWORD
    COMPLETE
    #SSO_REDIRECT
    #TOTP
}

input AMPasswordConfigInput{
    allowForgotten: Boolean
    orgUnitOwner: ID
}

input UpdatePasswordInput{
    originalPassword: String!
    newPassword: String!
    verifyPassword: String!
}

input DateTimeRangeInput{
    rangeStart: DateTime!
    rangeEnd: DateTime!
}

type WorkPacketStatusDetails{
    workOrderId: String!
    specId: String
    specImplName: String
    fingerPrint: String
    suppressBilling: Boolean
    deliveredFile: DeliveredFile
    workStepStatus: [WorkStepStatus]
    extractParameters: ExtractParameters
    qualityChecks: QualityChecks
    enrollmentStats: EnrollmentStat
    inboundEnrollmentStats: EnrollmentStat
    outboundEnrollmentStats: EnrollmentStat
    outboundRecordCounts: RecordCounts
    inboundLabel: String
    outboundLabel: String
}

type DeliveredFile{
    filename: String!
    fileSizeInBytes: Int
    textSizeInBytes: Int
    timeDelivered: DateTime
    ftp: DeliveredFileFTP
    kcurl: DeliveredKCURL
}

type DeliveredFileFTP{
    protocol: String!
    host: String!
    username: String
    folder: String
    port: Int
}

type DeliveredKCURL{
    url: String!
}

type WorkStepStatus{
    stepStatus: String
    stepName: String
    stepType: String
    populationCount: StatCountType
    transformedArchiveFile: ArchiveFileType
    recordCounts: RecordCounts
    stepFile: [ArchiveFileType]
    nvp: [NVPStr]
}

type StatCountType{
    value: Int
}

type ArchiveFileType{
    value: String!
    label: String
}

type RecordCounts{
    totalCount: Int
    showUser: Boolean
    recordCount: [RecordCount]
}

type RecordCount{
    name: String!
    count: Int!
}

type ExtractParameters{
    originalParameter: [ExtractParameter]
    overriddenParameter: [ExtractParameter]
    derivedParameter: [ExtractParameter]
}

type ExtractParameter{
    label: String
    name: String
    value: [String]
}

type QualityChecks{
    sequenceCreationEvent: [SequenceCreationEvent]
}

type SequenceCreationEvent{
    context: String
    unitId: String
    recordCreationEvent: [RecordCreationEvent]
}

type RecordCreationEvent{
    context: String
    outerContext: String
    unitId: String
    error: [FieldCreationEvent]
    warning: [FieldCreationEvent]
    information: [FieldCreationEvent]
}

type FieldCreationEvent{
    message: [String]
    name: String
    id: String
    value: String
    rawValue: String
    type: String
}

type DashboardPeriods{
    dailyCounts: DashboardPeriodCounts
    yesterdayCounts: DashboardPeriodCounts
    monthlyCounts: DashboardPeriodCounts
    lastMonthlyCounts: DashboardPeriodCounts
}

type DashboardPeriodCounts{
    vendorTransmissions: [DashboardPeriodCount]
    vendorTransmissionsBySpec: [DashboardPeriodCount]
    planSponsorTransmissions: [DashboardPeriodCount]
    fileTransmissions: [DashboardPeriodCount]
    vendorProcessErrors: [DashboardPeriodCount]
    planSponsorProcessErrors: [DashboardPeriodCount]
    fileProcessErrors: [DashboardPeriodCount]
    transmissionCount: Int
    billingUnitCount: Int
    processErrorCount: Int
}

type DashboardPeriodCount{
    name: String
    secondaryDescr: String
    count: Int
    total: Int
}

input WorkPacketStatusFilter{
    excludedEnvs: [String]
}

type WorkPacketStatus{
    workOrderId: String!
    timestamp: DateTime!,
    planSponsorId: String,
    detailsPath: String,
    subClientPath: String,
    inboundFilename: String!,
    vendorId: String,
    step: Int!,
    stepStatus: String!,
    packetStatus: String!,
    reprocessedBy: String,
    reprocessAction: Int,
    recordHighlightCount: Int,
    populationCount: Int,
    recordHighlightType: String,
    clientFileArchivePath: String,
    vendorFileArchivePath: String,
    supplementalFilesArchivePaths: [String],
    archiveOnly: Boolean,
    hasErrors: Boolean
}

type EnrollmentStat{
    insuredStat: InsuredStat
    excludedInsuredStat: InsuredStat
    excludedPlanInsuredStat: [PlanInsuredStat]
    planInsuredStat: [PlanInsuredStat]
}

type InsuredStat{
    subscribers: InsuredStatCount
    dependents: InsuredStatCount
}

type PlanInsuredStat{
    planCode: String
    planType: String

    subscribers: InsuredStatCount
    dependents: InsuredStatCount
}

type InsuredStatCount{
    active: StatInt
    ended: StatInt
    expectedTotal: Int
    inTolerance: Boolean
    toleranceMsg: String
    hold: Boolean
}

type StatInt{
    prior: Int
    value: Int
}

type PasswordPage {
    ruleGroup: PasswordRuleGroup!
}

type PasswordRuleGroup{
    """
    number of rule predicates that must be true for the group to pass
    if numberOfCharacteristics is omitted all rules are required
    """
    numberOfCharacteristics: Int
    """
    list of rules or rule sub groups
    """
    rules: [PasswordRule]
}

type PasswordLengthRule {
    minLength: Int
    maxLength: Int
}

type PasswordWhitespaceRule {
    allowedWhitespace: WhitespaceRuleType
}

type PasswordCharacterRule {
    characterType: PasswordCharacterType
    numberOfCharacters: Int
}

type PasswordStrengthRule {
    requiredStrengthLevel: Int!
}

enum WhitespaceRuleType {
    NONE
}

enum PasswordCharacterType {
    UPPER_CASE
    LOWER_CASE
    DIGIT
    SPECIAL
}

union PasswordRule = PasswordLengthRule | PasswordWhitespaceRule | PasswordCharacterRule | PasswordStrengthRule | PasswordRuleGroup

type AMPolicyPage{
    """The services availble for permission actions"""
    permissionServices: [CDXServiceNVP]
    """Avaliable Predicates for this policy's permissions note a policy does not need a predicate"""
    predicates: [PermissionPredicateNVP]
    """can this policy be configured as a template"""
    showTemplateSection: Boolean
    """The service archtype for this template"""
    templateServices: [CDXServiceNVP]
    permissionEffectNVPs: [PermissionEffectNVP]
}

enum CDXService{
    CDX
    INTEGRATION
    ACCESS_MANAGEMENT
}

type CDXServiceNVP{
    name: String!
    value: CDXService
}

enum CDXFacet{
    ALL
    ARCHIVE
    STATUS
    AM_POLICY
    AM_USER
    ORGANIZATION
}

type CDXFacetNVP{
    name: String!
    value: CDXFacet!
}

enum PermissionVerb{
    ALL
    CREATE
    READ
    UPDATE
    DELETE
    LIST
    DOWNLOAD
    RESTART
    ASSIGN
}

type PermissionVerbNVP{
    name: String!
    value: PermissionVerb!
}

type WebPage{
    type: CDXWebPage!
    """
    parameters: any dynamic parameters the page end point needs to be called with
    """
    parameters: [NVP]
    """
    commands: actions on the page that may lead to another page e.g. add new
    """
    commands: [WebNav]
    """
    pivots: any pivots the page might have
    """
    pivots: [WebPivot]
}

type WebAppDomain{
    type: CDXWebAppDomain!
    """
    selectedPage: either the page to load - must be in teh navItems
    """
    selectedPage: CDXWebPage
    """
    navItems: either the left nav or top nav depending on the domain
    """
    navItems: [WebNav]
}

type WebNav{
    label: String
    """
    page: WebPage to nave to, blank if this only has subnavs
    """
    page: WebPage
    """
    appDomain: only needs to be set here if this link will change domains
    """
    appDomain: CDXWebAppDomain
    subNavItems: [WebNav]
}

type WebPivot{
    label: String
    type: CDXWebPivot!
}

type NVPStr{
    name: String!
    value: String!
}

type NVPId{
    name: String!
    value: ID!
}

enum CDXWebPage{
    DASHBOARD
    FILE_STATUS
    ARCHIVES
    SCHEDULE
    TRANSMISSIONS
    ERRORS
    ORG_ACTIVITY
    ACTIVE_ORGS
    ACTIVE_USERS
    DELETED_USERS
    AM_GROUPS
    AM_POLICIES
    FTP_TEST
    IMPL_DEPLOY
    USER_ACCOUNT_RULES
    PASSWORD_RULES
    SSO_CONFIG
    ADD_ORG
    ADD_USER
    COLOR_PALETTES

}

enum CDXWebAppDomain{
    DASHBOARD
    ORGANIZATION
}

enum CDXWebPivot{
    ACTIVITY
    IN_PROGRESS
}

union NVP = NVPStr | NVPId

input CreateOrgInput {
    orgId: String!
    orgName: String!
    orgType: OrgType!
    orgOwnerId: ID
}

type Organization{
    id: ID
    name: String
    orgId: String!
    orgType: OrgType!
}

enum OrgType {
    INTEGRATION_SPONSOR
    INTEGRATION_ADMIN_SEGREGATED
    INTEGRATION_PLATFORM
    INTEGRATION_ADMIN_COMBINED
    VENDOR
    SYSTEM_INTEGRATOR
    INDEPENDENT_CONSULTANT
    CDX
    TEMPLATE
    OUTSIDE_PROMOTER
    SALES_PROSPECT
}

input CreateAMPolicyInput{
    name: String!
    orgOwnerId: ID!
    permissions: [CreateAMPermissionInput]
    tmpl: Boolean
    tmplUseAsIs: Boolean
    tmplServiceType: CDXService
}

input CreateAMPermissionInput{
    policySid: ID
    effect: PermissionEffect!
    actions: [CreateAMPermissionActionInput]
    predicate: PermissionPredicate
    predVar1: String
    predParam1: String
}

input CreateAMPermissionActionInput{
    permissionSid: ID
    service: CDXService!
    facet: CDXFacet!
    verb: PermissionVerb!
}

enum PermissionEffect{
    ALLOW
    DENY
}

type PermissionEffectNVP{
    name: String!
    value: PermissionEffect!
}

enum PermissionPredicate{
    NOT_KNTU_ENV
    STRING_EQUALS_IGNORE_CASE
    STRING_NOT_EQUALS_IGNORE_CASE
}

type PermissionPredicateNVP{
    name: String!
    value: PermissionPredicate!
}

type AMPolicy{
    id: ID
    name: String!
    permissions: [AMPermission]
    tmpl: Boolean
    tmplUseAsIs: Boolean
    tmplServiceType: CDXService
}

type AMPermission{
    id: ID
    effect: PermissionEffect!
    actions: [AMPermissionAction]
    predicate: PermissionPredicate
    predVar1: String
    predParam1: String
}

type AMPermissionAction{
    id: ID
    service: CDXService!
    facet: CDXFacet!
    verb: PermissionVerb!
}

input CreateAMGroupInput{
    orgOwnerId: ID!
    name: String!
    description: String
    tmpl: Boolean
    tmplUseAsIs: Boolean
    tmplServiceType: CDXService
    policyIds: [ID]
}

type AMGroup{
    id: ID
    name: String!
    description: String
    tmpl: Boolean
    tmplUseAsIs: Boolean
    tmplServiceType: CDXService
    policies: [AMPolicy]
}

type AMPolicyConnection{
    paginationInfo: PaginationInfo!
    nodes: [AMPolicy]
}

type AMGroupConnection{
    paginationInfo: PaginationInfo!
    nodes: [AMGroup]
}

input CreateUserInput {
    email: String!
    password: String
    orgOwnerId: ID!
    groupIds: [ID]
}

input CreatePersonInput {
    firstNm: String!
    lastNm: String
}

type User{
    id: ID!
    email: String!
    person: Person
}

type Person {
    id: ID!
    firstNm: String!
    lastNm: String
}

input DeleteAMPoliciesInput{
    policySids: [ID]!
}

input DeleteAMPermissionsInput{
    policySid: ID!
    permissionSids: [ID]!
}

input DeleteAMPermissionActionsInput{
    permissionSid: ID!
    permissionActionSids: [ID]!
}

input UpdateAMPolicyInput{
    policySid: ID!
    name: String
}

input UpdateAMPermissionInput{
    policySid: ID!
    permissionSid: ID!
    effect: PermissionEffect!
    predicate: PermissionPredicate
    predVar1: String
    predParam1: String
}

input UpdateAMPermissionActionInput{
    permissionSid: ID!
    permissionActionSid: ID!
    service: CDXService!
    facet: CDXFacet!
    verb: PermissionVerb!
}

type PaginationInfo{
    totalPages: Int
    totalElements: Int
    pageNumber: Int
    pageSize: Int
}

input PageableInput{
    pageNumber: Int
    pageSize: Int
    sort: [SortOrderInput]
}

input SortOrderInput{
    direction: SortDirection
    property: String
    ignoreCase: Boolean
    nullHandling: NullHandling
}

input UserFilterInput{
    activeFilter: ActiveEnum
}

input OrgFilterInput{
    activeFilter: ActiveEnum
}

enum SortDirection{
    ASC
    DESC
}

enum NullHandling{
    NULLS_FIRST
    NULLS_LAST
}

enum ActiveEnum{
    ACTIVE
    INACTIVE
    ALL
}

type OrganizationConnection{
    paginationInfo: PaginationInfo!
    nodes: [Organization]
}

type UserConnection{
    paginationInfo: PaginationInfo!
    nodes: [User]
}

type WPProcessErrorConnection{
    paginationInfo: PaginationInfo!
    nodes: [WPProcessError]
}

type WPProcessError{
    id: ID!
    workOrderId: String!
    startTime: DateTime!
    stepName: String
    planSponsorId: String
    vendorId: String
    msg : String
    inboundFilename : String
    clientFileArchivePath : String
}

type WPTransmissionConnection{
    paginationInfo: PaginationInfo!
    nodes: [WPTransmission]
}

type WPTransmission{
    id: ID!
    workOrderId: String!
    deliveredOn: DateTime!
    planSponsorId: String
    vendorId: String
    specId: String
    implementation: String
    inboundFilename: String
    outboundFilename: String
    outboundFilesize: Int
    billingCount : Int
    totalRecords : Int
    extractType : String
    extractVersion : String
}

enum SchedOccurStatusEnum{
    SCHEDULED
    IN_RUN_WINDOW
    MISSED
    RAN_IN_WINDOW
    RAN_LATE
    RAN_EARLY
    RAN_OFF_SCHEDULE
    RAN_CLOSE_TO_SCHEDULE
    RAN_NOT_SCHEDULED
    ERRORED
    ERRORED_LATE
    ERRORED_EARLY
    ERRORED_OFF_SCHEDULE
    ERRORED_CLOSE_TO_SCHEDULE
    EXCHANGE_HELD
    EXCHANGE_HELD_OFF_SCHEDULE
    NOT_SCHEDULED
}

type ScheduleOccurrenceConnection{
    paginationInfo: PaginationInfo!
    nodes: [ScheduleOccurrence]
}

type ScheduleOccurrence{
    resource : String!
    scheduleId: ID
    timeScheduled: DateTime
    schedOccurStatus: SchedOccurStatusEnum!
    runOccurrences: [ScheduleRunOccurrence]
}

type ScheduleRunOccurrence{
    workOrderId: String!
    timeRan: DateTime
    status: SchedOccurStatusEnum!
}

type LogOutInfo{
    successful: Boolean!
}

enum ThemeColorMode{
    LIGHT
    DARK
}

enum ThemeFontSize {
    SMALL
    MEDIUM
    LARGE
}

type DashTheme{
    id: ID
    themeColorMode: ThemeColorMode
    themeFontSize: ThemeFontSize
    dashThemeColor: DashThemeColor
}

type DashThemeColor{
    id: ID
    defaultTheme: Boolean
    themeColorMode: ThemeColorMode
    paletteNm: String
    themePrimary: String
    themeLighterAlt: String
    themeLighter: String
    themeLight: String
    themeTertiary: String
    themeSecondary: String
    themeDarkAlt: String
    themeDark: String
    themeDarker: String
    neutralLighterAlt: String
    neutralLighter: String
    neutralLight: String
    neutralQuaternaryAlt: String
    neutralQuaternary: String
    neutralTertiaryAlt: String
    neutralTertiary: String
    neutralSecondary: String
    neutralPrimaryAlt: String
    neutralPrimary: String
    neutralDark: String
    black: String
    white: String
}

input OwnedInput{
    orgSid: ID!
    ownerId: ID
}

input OwnedInputSid{
    orgSid: ID!
    ownerId: ID!
    sid: ID!
}

input OwnedInputName{
    orgSid: ID!
    ownerId: ID!
    name: String!
}

input OrgSidInput{
    orgSid: ID!
}

type DashSite{
    id: ID
    active: Boolean
}

type DashThemeColorConnection{
    paginationInfo: PaginationInfo!
    nodes: [DashThemeColor]
}

input CreateDashThemeColorInput{
    orgSid: ID!
    ownerId: ID!
    defaultTheme: Boolean
    themeColorMode: ThemeColorMode
    paletteNm: String
    themePrimary: String
    themeLighterAlt: String
    themeLighter: String
    themeLight: String
    themeTertiary: String
    themeSecondary: String
    themeDarkAlt: String
    themeDark: String
    themeDarker: String
    neutralLighterAlt: String
    neutralLighter: String
    neutralLight: String
    neutralQuaternaryAlt: String
    neutralQuaternary: String
    neutralTertiaryAlt: String
    neutralTertiary: String
    neutralSecondary: String
    neutralPrimaryAlt: String
    neutralPrimary: String
    neutralDark: String
    black: String
    white: String
}

input UpdateDashThemeColorInput{
    sid: ID!
    orgSid: ID!
    ownerId: ID!
    defaultTheme: Boolean
    themeColorMode: ThemeColorMode
    paletteNm: String
    themePrimary: String
    themeLighterAlt: String
    themeLighter: String
    themeLight: String
    themeTertiary: String
    themeSecondary: String
    themeDarkAlt: String
    themeDark: String
    themeDarker: String
    neutralLighterAlt: String
    neutralLighter: String
    neutralLight: String
    neutralQuaternaryAlt: String
    neutralQuaternary: String
    neutralTertiaryAlt: String
    neutralTertiary: String
    neutralSecondary: String
    neutralPrimaryAlt: String
    neutralPrimary: String
    neutralDark: String
    black: String
    white: String
}

input CreateDefaultDashThemeInput{
    orgSid: ID!
    ownerId: ID!
    themeFontSize : ThemeFontSize
    themeColorMode : ThemeColorMode
    themeColorSid : ID
}

input UpdateDefaultDashThemeInput{
    orgSid: ID!
    ownerId: ID!
    sid : ID!
    themeFontSize : ThemeFontSize
    themeColorMode : ThemeColorMode
    themeColorSid : ID
}

enum GQOperationResponse{
    SUCCESS
    FAIL
}

type DefaultDashThemePage{
    themeColorModes: [ThemeColorMode]
    themeFontSizes: [ThemeFontSize]
    themeColorPalettes: [DashThemeColor]
}

input DashThemeInput{
    themeFontSize : ThemeFontSize
    themeColorMode : ThemeColorMode
}

input CreateUserDashThemeInput{
    orgSid: ID!
    ownerId: ID!
    themeFontSize : ThemeFontSize
    themeColorMode : ThemeColorMode
    themeColorSid : ID
}

input UpdateUserDashThemeInput{
    orgSid: ID!
    ownerId: ID!
    sid : ID!
    themeFontSize : ThemeFontSize
    themeColorMode : ThemeColorMode
    themeColorSid : ID
}

type UserDashThemePage{
    themeColorModes: [ThemeColorMode]
    themeFontSizes: [ThemeFontSize]
    themeColorPalettes: [DashThemeColor]
    dashTheme: DashTheme
}

input DashThemeColorDefaultInput{
    orgSid: ID!
    ownerId: ID!
    sid: ID!
    defaultTheme: Boolean!
}

input DashThemeColorModeInput{
    orgSid: ID!
    ownerId: ID!
    sid: ID!
    themeColorMode: ThemeColorMode!
}

type OrganizationLink{
    id: ID!
    orgId: String!
    name: String!
    type: CDXWebPage
    activityTime: DateTime
}

type OrganizationLinkConnection{
    paginationInfo: PaginationInfo!
    nodes: [OrganizationLink]
}
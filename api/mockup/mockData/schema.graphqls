type Query {
  beginLogin(userId: String!): LoginStep
  workPacketStatusDetails(orgSid: ID!, workOrderId: String!): WorkPacketStatusDetails
  workPacketStatuses(orgSid: ID!, dateRange: DateTimeRangeInput, filter: WorkPacketStatusFilter): [WorkPacketStatus]
  dashboardPeriods(orgSid: ID!): DashboardPeriods
}

type Mutation {
  passwordLogin(userId: String!, password: String!): LoginStep
}

scalar DateTime
scalar Date

type LoginStep {
  userId: String!
  step: LoginStepType!
  redirectPath: String
  allowLostPassword: Boolean
  loginCompletePage: LoginCompletePage
  tokenUser: TokenUser
}

type TokenUser {
  token: String
  session: UserSession
}

type UserSession {
  id: ID!
  orgId: ID!
  userId: String!
  defaultAuthorities: [String]
}

enum LoginStepType {
  USERNAME
  PASSWORD
  COMPLETE
  #SSO_REDIRECT
  #TOTP
}

enum LoginCompletePage {
  WP_STATUS
  ORG_ACTIVITY
  ORG_LIST
}

input AMPasswordConfigInput {
  allowForgotten: Boolean
  orgUnitOwner: ID
}

input DateTimeRangeInput {
  rangeStart: DateTime!
  rangeEnd: DateTime!
}

type WorkPacketStatusDetails {
  workOrderId: String!
  specId: String
  specImplName: String
  fingerPrint: String
  suppressBilling: Boolean
  deliveredFile: DeliveredFile
  workStepStatus: [WorkStepStatus]
  extractParameters: ExtractParameters
  qualityChecks: QualityChecks
  enrollmentStats: EnrollmentStat
  inboundEnrollmentStats: EnrollmentStat
  outboundEnrollmentStats: EnrollmentStat
}

type DeliveredFile {
  filename: String!
  fileSizeInBytes: Int
  textSizeInBytes: Int
  timeDelivered: DateTime
  ftp: DeliveredFileFTP
  kcurl: DeliveredKCURL
}

type DeliveredFileFTP {
  protocol: String!
  host: String!
  username: String
  folder: String
  port: Int
}

type DeliveredKCURL {
  url: String!
}

type WorkStepStatus {
  stepStatus: String
  stepName: String
  stepType: String
  populationCount: StatCountType
  transformedArchiveFile: ArchiveFileType
  recordCounts: RecordCounts
  stepFile: [ArchiveFileType]
  nvp: [NVP]
}

type StatCountType {
  value: Int
}

type ArchiveFileType {
  value: String
}

type NVP {
  value: String!
  name: String!
}

type RecordCounts {
  totalCount: Int
  showUser: Boolean
  recordCount: [RecordCount]
}

type RecordCount {
  name: String!
  count: Int!
}

type ExtractParameters {
  originalParameter: [ExtractParameter]
  overriddenParameter: [ExtractParameter]
  derivedParameter: [ExtractParameter]
}

type ExtractParameter {
  label: String
  name: String
  value: [String]
}

type QualityChecks {
  sequenceCreationEvent: [SequenceCreationEvent]
}

type SequenceCreationEvent {
  context: String
  unitId: String
  recordCreationEvent: [RecordCreationEvent]
}

type RecordCreationEvent {
  context: String
  outerContext: String
  unitId: String
  error: [FieldCreationEvent]
  warning: [FieldCreationEvent]
  information: [FieldCreationEvent]
}

type FieldCreationEvent {
  message: [String]
  name: String
  id: String
  value: String
  rawValue: String
  type: String
}

type DashboardPeriods {
  dailyCounts: DashboardPeriodCounts
  yesterdayCounts: DashboardPeriodCounts
  monthlyCounts: DashboardPeriodCounts
  lastMonthlyCounts: DashboardPeriodCounts
}

type DashboardPeriodCounts {
  vendorTransmissions: [DashboardPeriodCount]
  vendorTransmissionsBySpec: [DashboardPeriodCount]
  planSponsorTransmissions: [DashboardPeriodCount]
  fileTransmissions: [DashboardPeriodCount]
  vendorProcessErrors: [DashboardPeriodCount]
  planSponsorProcessErrors: [DashboardPeriodCount]
  fileProcessErrors: [DashboardPeriodCount]
  transmissionCount: Int
  billingUnitCount: Int
  processErrorCount: Int
}

type DashboardPeriodCount {
  name: String
  secondaryDescr: String
  count: Int
  total: Int
}

input WorkPacketStatusFilter {
  excludedEnvs: [String]
}

type WorkPacketStatus {
  workOrderId: String!
  timestamp: DateTime!
  planSponsorId: String
  detailsPath: String
  subClientPath: String
  inboundFilename: String!
  vendorId: String
  step: Int!
  stepStatus: String!
  packetStatus: String!
  reprocessedBy: String
  reprocessAction: Int
  recordHighlightCount: Int
  recordHighlightType: String
  clientFileArchivePath: String
  vendorFileArchivePath: String
  supplementalFilesArchivePaths: [String]
  archiveOnly: Boolean
  hasErrors: Boolean
}

type EnrollmentStat {
  insuredStat: InsuredStat
  excludedInsuredStat: InsuredStat
  excludedPlanInsuredStat: [PlanInsuredStat]
  planInsuredStat: [PlanInsuredStat]
}

type InsuredStat {
  subscribers: InsuredStatCount
  dependents: InsuredStatCount
}

type PlanInsuredStat {
  planCode: String
  planType: String

  subscribers: InsuredStatCount
  dependents: InsuredStatCount
}

type InsuredStatCount {
  active: StatInt
  ended: StatInt
  expectedTotal: Int
  inTolerance: Boolean
  toleranceMsg: String
  hold: Boolean
}

type StatInt {
  prior: Int
  value: Int
}
